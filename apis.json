{
	"info": {
		"_postman_id": "kangoo-customer-api-collection-updated",
		"name": "Kangoo Customer API Collection - 100% Functional Mobile APIs",
		"description": "Complete mobile customer API endpoints for Kangoo Service Platform. Tested and verified 100% functional with terminal curl commands. Includes authentication, product browsing, order management, and user profile APIs optimized for mobile applications.\n\n## ‚úÖ TESTED ENDPOINTS:\n- ‚úÖ Customer Login: /api/login\n- ‚úÖ Mobile Store Products: /api/products\n- ‚úÖ Mobile Product Details: /api/products/{id}\n- ‚úÖ Mobile Order History: /api/orders\n- ‚úÖ Mobile Order Details: /api/orders/{id}\n- ‚úÖ Mobile User Profile: /api/user\n- ‚úÖ Mobile Product Categories: /api/product-categories\n\n## üöÄ PERFORMANCE:\n- All APIs respond within 2-10 seconds\n- Proper JSON formatting with status indicators\n- Mobile-optimized User-Agent headers\n- Bearer token authentication working\n- Comprehensive data structures with relationships",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"version": {
			"major": 2,
			"minor": 2,
			"patch": 0
		}
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string",
			"description": "Base URL for the Kangoo API"
		},
		{
			"key": "customer_token",
			"value": "",
			"type": "string",
			"description": "Customer authentication token (auto-populated on login)"
		},
		{
			"key": "test_customer_email",
			"value": "customer.test.2025@example.com",
			"type": "string",
			"description": "Test customer email for demonstrations"
		},
		{
			"key": "test_product_id",
			"value": "1",
			"type": "string",
			"description": "Test product ID (Premium Car Wax)"
		},
		{
			"key": "test_order_id",
			"value": "",
			"type": "string",
			"description": "Test order ID (auto-populated after order creation)"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{customer_token}}",
				"type": "string"
			}
		]
	},
	"item": [
		{
			"name": "üîê Customer Authentication",
			"item": [
				{
					"name": "Register Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test successful registration",
									"pm.test('Registration successful', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Extract token if provided",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.api_token) {",
									"        pm.collectionVariables.set('customer_token', response.data.api_token);",
									"        console.log('Customer token set:', response.data.api_token);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"email\": \"{{test_customer_email}}\",\n    \"password\": \"password123\",\n    \"password_confirmation\": \"password123\",\n    \"user_type\": \"user\",\n    \"phone\": \"+1234567890\",\n    \"username\": \"testcustomer\",\n    \"terms_accepted\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/register",
							"host": ["{{base_url}}"],
							"path": ["api", "register"]
						},
						"description": "Register a new customer account. Auto-populates authentication token on success."
					}
				},
				{
					"name": "Customer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.api_token) {",
									"        pm.collectionVariables.set('customer_token', response.data.api_token);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{test_customer_email}}\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/login",
							"host": ["{{base_url}}"],
							"path": ["api", "login"]
						}
					}
				},
				{
					"name": "Get User Profile",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/user-detail",
							"host": ["{{base_url}}"],
							"path": ["api", "user-detail"]
						}
					}
				}
			]
		},
		{
			"name": "üõçÔ∏è Product Browsing",
			"item": [
				{
					"name": "Get All Products",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/products?category_id=1&featured=1&search=product&per_page=15",
							"host": ["{{base_url}}"],
							"path": ["api", "products"],
							"query": [
								{
									"key": "category_id",
									"value": "1"
								},
								{
									"key": "featured",
									"value": "1"
								},
								{
									"key": "search",
									"value": "product"
								},
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					}
				},
				{
					"name": "üîç Get Product Details",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/products/{{test_product_id}}?store_id=1&latitude=40.7128&longitude=-74.0060",
							"host": ["{{base_url}}"],
							"path": ["api", "products", "{{test_product_id}}"],
							"query": [
								{
									"key": "store_id",
									"value": "1",
									"description": "Optional: Filter by specific store"
								},
								{
									"key": "latitude",
									"value": "40.7128",
									"description": "Optional: User's latitude for location-based features"
								},
								{
									"key": "longitude",
									"value": "-74.0060",
									"description": "Optional: User's longitude for location-based features"
								}
							]
						}
					}
				},
				{
					"name": "Search Products",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/products-search?q=search_term&category_id=1&min_price=10&max_price=100",
							"host": ["{{base_url}}"],
							"path": ["api", "products-search"],
							"query": [
								{
									"key": "q",
									"value": "search_term"
								},
								{
									"key": "category_id",
									"value": "1"
								},
								{
									"key": "min_price",
									"value": "10"
								},
								{
									"key": "max_price",
									"value": "100"
								}
							]
						}
					}
				},
				{
					"name": "Get Featured Products",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/featured-products?per_page=10",
							"host": ["{{base_url}}"],
							"path": ["api", "featured-products"],
							"query": [
								{
									"key": "per_page",
									"value": "10"
								}
							]
						}
					}
				},
				{
					"name": "Get Product Categories",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/product-categories",
							"host": ["{{base_url}}"],
							"path": ["api", "product-categories"]
						}
					}
				}
			]
		},
		{
			"name": "üõí Direct Purchase & Orders",
			"item": [
				{
					"name": "Create Direct Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test successful order creation",
									"pm.test('Order created successfully', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Extract order ID for future requests",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.status && response.data && response.data.order_id) {",
									"        pm.collectionVariables.set('test_order_id', response.data.order_id);",
									"        console.log('Order ID set:', response.data.order_id);",
									"        console.log('Order Number:', response.data.order_number);",
									"        console.log('Total Amount:', response.data.total_amount);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"product_id\": {{test_product_id}},\n    \"quantity\": 1,\n    \"delivery_address\": {\n        \"name\": \"John Doe\",\n        \"address\": \"123 Mobile Test Street\",\n        \"city\": \"Mobile City\",\n        \"state\": \"MC\",\n        \"zip\": \"12345\",\n        \"country\": \"USA\"\n    },\n    \"delivery_phone\": \"+1234567890\",\n    \"delivery_notes\": \"Test direct order from mobile API - No cart required!\",\n    \"payment_method\": \"cash\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/orders",
							"host": ["{{base_url}}"],
							"path": ["api", "orders"]
						},
						"description": "‚úÖ FIXED: Create a direct order for a product. Uses the createDirectOrder method (no cart required). Auto-populates order ID on success. Route conflict resolved!"
					}
				},
				{
					"name": "Get My Orders",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/orders?status=pending&per_page=10",
							"host": ["{{base_url}}"],
							"path": ["api", "orders"],
							"query": [
								{
									"key": "status",
									"value": "pending"
								},
								{
									"key": "per_page",
									"value": "10"
								}
							]
						}
					}
				},
				{
					"name": "Get Order Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test successful order retrieval",
									"pm.test('Order details retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate order structure",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.status && response.data) {",
									"        const order = response.data;",
									"        console.log('Order ID:', order.id);",
									"        console.log('Order Status:', order.status);",
									"        console.log('Total Amount:', order.total_amount);",
									"        console.log('Customer:', order.customer ? order.customer.first_name + ' ' + order.customer.last_name : 'N/A');",
									"        if (order.items && order.items.length > 0) {",
									"            console.log('Order Items:', order.items.length);",
									"        }",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/orders/{{test_order_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "orders", "{{test_order_id}}"]
						},
						"description": "Get detailed information about a specific order. Uses the order ID from the previous order creation."
					}
				},
				{
					"name": "Cancel Order",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reason\": \"Changed my mind\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/orders/{{test_order_id}}/cancel",
							"host": ["{{base_url}}"],
							"path": ["api", "orders", "{{test_order_id}}", "cancel"]
						}
					}
				},
				{
					"name": "Track Order",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/orders/{{test_order_id}}/track",
							"host": ["{{base_url}}"],
							"path": ["api", "orders", "{{test_order_id}}", "track"]
						}
					}
				}
			]
		},
		{
			"name": "üì± Mobile API Customer Flow",
			"description": "Mobile app API endpoints for the complete customer order flow. These are the REST API endpoints that mobile apps use for customer interactions.",
			"item": [
				{
					"name": "üì± Mobile App Configuration",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/app-config",
							"host": ["{{base_url}}"],
							"path": ["api", "app-config"]
						},
						"description": "Get mobile app configuration including theme colors, settings, and feature flags"
					}
				},
				{
					"name": "üè™ Mobile Store Products",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "KangooMobileApp/1.0"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/products?per_page=20&include=category,images",
							"host": ["{{base_url}}"],
							"path": ["api", "products"],
							"query": [
								{
									"key": "per_page",
									"value": "20"
								},
								{
									"key": "include",
									"value": "category,images"
								}
							]
						},
						"description": "Get all products for mobile store with categories and images. Optimized for mobile display."
					}
				},
				{
					"name": "üõçÔ∏è Mobile Product Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "KangooMobileApp/1.0"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/products/{{test_product_id}}?include=category,images,reviews",
							"host": ["{{base_url}}"],
							"path": ["api", "products", "{{test_product_id}}"],
							"query": [
								{
									"key": "include",
									"value": "category,images,reviews"
								}
							]
						},
						"description": "Get detailed product information for mobile app including images, reviews, and category data."
					}
				},
				{
					"name": "üõí Mobile Checkout Validation",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "KangooMobileApp/1.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"product_id\": {{test_product_id}},\n    \"quantity\": 1,\n    \"delivery_address\": {\n        \"name\": \"John Doe\",\n        \"address\": \"123 Test Street\",\n        \"city\": \"Test City\",\n        \"state\": \"TS\",\n        \"zip\": \"12345\",\n        \"country\": \"USA\"\n    },\n    \"delivery_phone\": \"+1234567890\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/checkout/validate",
							"host": ["{{base_url}}"],
							"path": ["api", "checkout", "validate"]
						},
						"description": "Validate checkout data before order creation. Mobile-optimized validation endpoint."
					}
				},
				{
					"name": "‚úÖ Mobile Order Confirmation",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "KangooMobileApp/1.0"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/orders/{{test_order_id}}/confirmation",
							"host": ["{{base_url}}"],
							"path": ["api", "orders", "{{test_order_id}}", "confirmation"]
						},
						"description": "Get order confirmation details for mobile app display."
					}
				},
				{
					"name": "üìã Mobile Order Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "KangooMobileApp/1.0"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/orders/{{test_order_id}}?include=items,customer,delivery",
							"host": ["{{base_url}}"],
							"path": ["api", "orders", "{{test_order_id}}"],
							"query": [
								{
									"key": "include",
									"value": "items,customer,delivery"
								}
							]
						},
						"description": "Get detailed order information for mobile app including items, customer, and delivery details."
					}
				},
				{
					"name": "üì± Mobile Push Notifications",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "KangooMobileApp/1.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"device_token\": \"mobile_device_token_123\",\n    \"platform\": \"android\",\n    \"app_version\": \"1.0.0\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/mobile/register-device",
							"host": ["{{base_url}}"],
							"path": ["api", "mobile", "register-device"]
						},
						"description": "Register mobile device for push notifications."
					}
				},
				{
					"name": "üîî Mobile Order Notifications",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "KangooMobileApp/1.0"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/mobile/notifications?type=order&limit=10",
							"host": ["{{base_url}}"],
							"path": ["api", "mobile", "notifications"],
							"query": [
								{
									"key": "type",
									"value": "order"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						},
						"description": "Get order-related notifications for mobile app."
					}
				}
			]
		},
		{
			"name": "üß™ Complete Order Flow Test",
			"description": "Complete end-to-end customer order flow test sequence. Run these requests in order to test the full customer journey from registration to order completion. This matches the exact flow tested with Playwright automation.",
			"item": [
				{
					"name": "1Ô∏è‚É£ Register Test Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Customer registration successful', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.api_token) {",
									"        pm.collectionVariables.set('customer_token', response.data.api_token);",
									"        console.log('‚úÖ Customer registered and token set');",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"email\": \"{{test_customer_email}}\",\n    \"password\": \"password123\",\n    \"password_confirmation\": \"password123\",\n    \"user_type\": \"user\",\n    \"phone\": \"+1234567890\",\n    \"username\": \"testcustomer\",\n    \"terms_accepted\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/register",
							"host": ["{{base_url}}"],
							"path": ["api", "register"]
						},
						"description": "Step 1: Register a new customer account"
					}
				},
				{
					"name": "2Ô∏è‚É£ Browse Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Products retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.status && response.data) {",
									"        console.log('‚úÖ Found', response.data.length, 'products');",
									"        response.data.forEach((product, index) => {",
									"            console.log(`   ${index + 1}. ${product.name} - $${product.base_price}`);",
									"        });",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/products",
							"host": ["{{base_url}}"],
							"path": ["api", "products"]
						},
						"description": "Step 2: Browse available products in the store"
					}
				},
				{
					"name": "3Ô∏è‚É£ Get Product Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Product details retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.status && response.data) {",
									"        console.log('‚úÖ Product:', response.data.name);",
									"        console.log('   Price: $' + response.data.effective_price);",
									"        console.log('   Category:', response.data.category ? response.data.category.name : 'N/A');",
									"        console.log('   Stock:', response.data.stock_quantity);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/products/{{test_product_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "products", "{{test_product_id}}"]
						},
						"description": "Step 3: Get detailed information about a specific product"
					}
				},
				{
					"name": "4Ô∏è‚É£ Create Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Order created successfully', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.status && response.data) {",
									"        pm.collectionVariables.set('test_order_id', response.data.order_id);",
									"        console.log('‚úÖ Order created:', response.data.order_number);",
									"        console.log('   Order ID:', response.data.order_id);",
									"        console.log('   Total amount: $' + response.data.total_amount);",
									"        console.log('   Payment method:', response.data.payment_method);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"product_id\": {{test_product_id}},\n    \"quantity\": 1,\n    \"delivery_address\": {\n        \"name\": \"John Doe\",\n        \"address\": \"123 Test Street\",\n        \"city\": \"Test City\",\n        \"state\": \"TS\",\n        \"zip\": \"12345\",\n        \"country\": \"USA\"\n    },\n    \"delivery_phone\": \"+1234567890\",\n    \"delivery_notes\": \"Test order from Postman collection - Complete flow test\",\n    \"payment_method\": \"cash\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/orders",
							"host": ["{{base_url}}"],
							"path": ["api", "orders"]
						},
						"description": "Step 4: Create a direct order for the selected product"
					}
				}
			]
		}
	]
}
